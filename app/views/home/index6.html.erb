<%= javascript_include_tag 'index6' %>
<script id="vs" type="x-shader/x-vertex">
  attribute vec3 position;
  attribute vec4 color;
  uniform mat4 mvp_matrix;
  varying vec4 vColor;
  void main(){
    gl_Position = mvp_matrix * vec4(position, 1.0);
    gl_PointSize = 5.0;
    vColor = color;
  }
</script>
<script id="fs" type="x-shader/x-fragment">
  precision mediump float;
  varying vec4 vColor;
  void main(){
    gl_FragColor = vColor;
  }
</script>
<script id="pvs" type="x-shader/x-vertex">
  attribute float num;
  uniform int temp;
  uniform float random;
  uniform mat4 mvp_matrix;
  uniform mat4 inv_matrix;
  uniform vec3 light_direction;
  uniform vec3 eye_direction;
  uniform vec4 ambient_color;
  varying vec4 v_color;
  void main(){
    float x = fract(random * num) * 10.0 - 5.0;
    float y = fract(random * random * num) * 10.0 - 5.0;
    float z = fract(random * random * random * num) * 10.0 - 5.0;
    gl_Position = vec4(x, y, z, 1.0);

    vec4 color = vec4(random, random, random, 1.0);
    vec3 normal = vec3(1.0, 1.0, 1.0);

    vec3  inv_light = normalize(inv_matrix * vec4(light_direction, 0.0)).xyz;
    vec3  inv_eye = normalize(inv_matrix * vec4(eye_direction, 0.0)).xyz;
    vec3  half_le = normalize(inv_light + inv_eye);
    float diffuse = clamp(dot(normal, inv_light), 0.0, 1.0);
    float specular = pow(clamp(dot(normal, half_le), 0.0, 1.0), 50.0);
    vec4  light = color * vec4(vec3(diffuse), 1.0) + vec4(vec3(specular), 1.0);
    v_color = light + ambient_color;
  }

  float rand(const vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
  }
</script>
<script id="pfs" type="x-shader/x-fragment">
  precision mediump float;
  varying vec4 v_color;
  void main(){
    gl_FragColor = v_color;
  }
</script>
</head>
<body>
  <canvas id="canvas"></canvas>
  <input type="file" id="file" value="music">
</body>